<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compose Docs</title>
    <link>https://example.com/docs/compose/</link>
    <description>Recent content on Compose Docs</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/docs/compose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install theme</title>
      <link>https://example.com/docs/compose/install-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/install-theme/</guid>
      <description>Prerequisites First ensure that you have hugo installed.
You need a recent extended version (we recommend version 0.61 or later) of Hugo to do local builds and previews of sites (like this one) that uses this theme.
If you install from the release page, make sure to get the extended Hugo version, which supports sass; you may need to scroll down the list of releases to see it.
For comprehensive Hugo documentation, see gohugo.</description>
    </item>
    
    <item>
      <title>Use forestry CMS</title>
      <link>https://example.com/docs/compose/use-forestry-cms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/use-forestry-cms/</guid>
      <description>Do you prefer managing your site using a CMS? Or would you like to make it easier for someone (a non-techie, perhaps) in your team to make edits easily? If interested, follow along. Else, skip to the next section
Let&#39;s sync your site with forestry CMS.
Prerequisites !! Obviously you ought to have a github account. This is where your website source will live. Basically, forestry will read from github and write (commmit) to your github repo.</description>
    </item>
    
    <item>
      <title>Content organization</title>
      <link>https://example.com/docs/compose/organize-content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/organize-content/</guid>
      <description>This theme is primarily meant for documentation.
Documentation All your documentation content should be authored within the docs directory.
Unlike other regular pages, the documentation pages will have a left sidebar. This sidebar will list links to all the pages in the documentation pages. Beneath each link, there will be a collapsible list of table of contents&#39; links. These nested lists will unfold automatically on the active/current page.
Home Page At the root level there&#39;s an _index.</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://example.com/docs/compose/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/shortcodes/</guid>
      <description>Instead of writing all your site pages from scratch, Hugo lets you define and use shortcodes.
Why shortcodes? While markdown is sufficient to produce simple pages, it&#39;s insufficient where complex page structures are needed. Thusly, whenever we need special styling, shortcodes compliment the shortcomings of markdown.
This way, you can side step complex html and css boilerplate in your content files.
Sometimes, the shortcode will wrap content, sometimes it won&#39;t. When content is wrapped, a closing shortcode tag is needed.</description>
    </item>
    
    <item>
      <title>Shortcodes Applied</title>
      <link>https://example.com/docs/compose/shortcodes-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/shortcodes-example/</guid>
      <description>Blocks, columns &amp;amp; buttons 1{{&amp;lt; block &amp;#34;grid-2&amp;#34; &amp;gt;}} 2{{&amp;lt; column &amp;gt;}} 3#### Coumn 1  4 5Lorem ipsum dolor sit amet, 6... 7 8{{&amp;lt; button &amp;#34;https://github.com/onweru/compose&amp;#34; &amp;#34;Download Theme&amp;#34; &amp;gt;}} 9 10{{&amp;lt; /column &amp;gt;}} 11{{&amp;lt; column &amp;gt;}} 12 13&amp;lt;!-- generates ðŸ‘‡ --&amp;gt; Coumn 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>Search Function</title>
      <link>https://example.com/docs/compose/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/search/</guid>
      <description>Firstly, ensure you have these lines inside your config.toml file
1[outputs] 2 home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;,&amp;#34;JSON&amp;#34;] Compose implements fuse.js to enable search functionality. At the time of this writing, search on these theme takes either of this forms:
1. Passive search This occurs only when the user loads the search page i.e /search/. They can directly navigate to that url. Alternatively, the user can type you search query on the search field and click enter.</description>
    </item>
    
    <item>
      <title>Graphs, charts &amp; dynamic tables</title>
      <link>https://example.com/docs/compose/graphs-charts-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/graphs-charts-tables/</guid>
      <description>Using chart js library you can display data you have stored in a csv file as a pie chart, bar graph or doughnut chart.
At this point if you want to display data from a json or yaml file, you would need to convert it into csv first. Else the template will error out.
Once you have a csv file, you display the charts as follows:
Show a pie, doughnut &amp;amp; bar chart at once Firstly define the data you want to display from the front matter:</description>
    </item>
    
    <item>
      <title>Customize layouts &amp; components</title>
      <link>https://example.com/docs/compose/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/compose/customize/</guid>
      <description>Shortcodes modifiers These modifiers are classes you can use with shortcodes to customize the look and feel of your layouts and components.
Grid    modifier space     grid-2 2 columns   grid-3 3 columns   grid-4 4 columns    Spacing    modifier space     mt-1 1.5rem top margin   mt-2 3rem top margin   mt-3 4.</description>
    </item>
    
  </channel>
</rss>
